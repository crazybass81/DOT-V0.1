name: DOT Platform 배포 및 검증 (통합 버전)

on:
  push:
    branches:
      - main
      - release/*
    tags:
      - 'v*.*.*'
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      version:
        description: '배포할 버전 태그'
        required: false
        default: 'latest'
      environment:
        description: '배포 환경'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      validation_mode:
        description: '검증 모드'
        required: true
        default: 'full'
        type: choice
        options:
          - health
          - smoke
          - functional
          - performance
          - full
      skip_validation:
        description: '배포 검증 건너뛰기'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: dot-platform
  NODE_VERSION: '18'
  DOCKER_BUILDKIT: 1

jobs:
  # 1단계: 코드 품질 검사 및 빌드 준비
  code-quality:
    name: 코드 품질 검사
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.event_name == 'push'

    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4

      - name: Node.js 설정
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 의존성 설치
        run: npm ci

      - name: 린팅 실행
        run: npm run lint --if-present

      - name: 타입 체크
        run: npm run typecheck --if-present

      - name: 단위 테스트
        run: npm run test:unit --if-present

      - name: 테스트 결과 업로드
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            coverage/
            test-results/

  # 2단계: Docker 이미지 빌드 (Docker Compose 기반)
  build:
    name: Docker 이미지 빌드
    runs-on: ubuntu-latest
    needs: code-quality
    if: github.event_name != 'pull_request'

    outputs:
      backend-image: ${{ steps.meta.outputs.backend-image }}
      frontend-image: ${{ steps.meta.outputs.frontend-image }}
      version: ${{ steps.meta.outputs.version }}

    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4

      - name: Docker Buildx 설정
        uses: docker/setup-buildx-action@v3

      - name: GitHub Container Registry 로그인
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 메타데이터 추출
        id: meta
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          if [[ "$VERSION" == "refs/heads/main" ]]; then
            VERSION="latest"
          elif [[ "$VERSION" == refs/heads/* ]]; then
            VERSION=${VERSION#refs/heads/}
          fi

          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "backend-image=${{ env.REGISTRY }}/${{ github.repository }}-backend:$VERSION" >> $GITHUB_OUTPUT
          echo "frontend-image=${{ env.REGISTRY }}/${{ github.repository }}-frontend:$VERSION" >> $GITHUB_OUTPUT

      - name: 백엔드 이미지 빌드 및 푸시
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: ${{ steps.meta.outputs.backend-image }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 프론트엔드 이미지 빌드 및 푸시
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: ${{ steps.meta.outputs.frontend-image }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # 3단계: Staging 환경 배포 (Docker Compose 기반)
  deploy-staging:
    name: Staging 배포 및 검증
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    environment: staging

    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4

      - name: 배포 서버 SSH 설정
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.STAGING_SSH_KEY }}

      - name: Staging 서버 배포 (검증 포함)
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.STAGING_USER }}@${{ secrets.STAGING_HOST }} << 'EOF'
            cd ${{ secrets.STAGING_PATH }}
            git pull origin main

            # 환경 변수 설정
            export BACKEND_IMAGE="${{ needs.build.outputs.backend-image }}"
            export FRONTEND_IMAGE="${{ needs.build.outputs.frontend-image }}"
            export VALIDATION_MODE="${{ github.event.inputs.validation_mode || 'smoke' }}"
            export SKIP_VALIDATION="${{ github.event.inputs.skip_validation || 'false' }}"

            # DOT Platform 배포 검증 스크립트 실행
            ./scripts/deploy.sh ${{ needs.build.outputs.version }} staging
          EOF

      - name: Staging 배포 검증 결과 수집
        run: |
          # 헬스체크 확인
          curl -f http://${{ secrets.STAGING_HOST }}/health

          # 검증 리포트 다운로드
          scp ${{ secrets.STAGING_USER }}@${{ secrets.STAGING_HOST }}:${{ secrets.STAGING_PATH }}/validation-reports/*.json . || true

          # 배포 로그 수집
          ssh ${{ secrets.STAGING_USER }}@${{ secrets.STAGING_HOST }} \
            "cd ${{ secrets.STAGING_PATH }} && docker-compose -f docker-compose.prod.yml logs --tail=100" \
            > staging-deploy-logs.txt

      - name: 검증 결과 및 로그 업로드
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: staging-validation-results
          path: |
            *.json
            staging-deploy-logs.txt

  # 4단계: 통합 테스트 (Staging 환경에서 실제 검증)
  integration-test:
    name: 통합 테스트 및 성능 검증
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'

    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4

      - name: Node.js 설정
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 테스트 의존성 설치
        run: npm ci

      - name: Playwright 설치
        run: npx playwright install --with-deps

      - name: E2E 스모크 테스트 실행
        env:
          E2E_BASE_URL: http://${{ secrets.STAGING_HOST }}
          E2E_TIMEOUT: 60000
        run: |
          npm run test:e2e:smoke --if-present || echo "E2E 스모크 테스트 스크립트 없음"

      - name: 접근성 검증 (DOT Platform 검증 인프라)
        env:
          TARGET_URL: http://${{ secrets.STAGING_HOST }}
        run: |
          node tests/deployment/accessibility/a11y-check.js --url $TARGET_URL --timeout 120 || echo "접근성 검증 경고"

      - name: 다국어 지원 검증 (한/영/일/중)
        env:
          TARGET_URL: http://${{ secrets.STAGING_HOST }}
        run: |
          node tests/deployment/i18n/language-check.js --url $TARGET_URL --languages ko,en,ja,zh || echo "다국어 검증 경고"

      - name: K6 성능 테스트 (한국어 요구사항 검증)
        uses: grafana/k6-action@v0.3.1
        with:
          filename: tests/performance/k6-load-test.js
        env:
          BASE_URL: http://${{ secrets.STAGING_HOST }}

      - name: 통합 테스트 결과 업로드
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: integration-test-results
          path: |
            test-results/
            playwright-report/
            validation-reports/

  # 5단계: Production 배포 (태그 또는 수동 실행)
  deploy-production:
    name: Production 배포 및 검증
    runs-on: ubuntu-latest
    needs: [build, integration-test]
    if: startsWith(github.ref, 'refs/tags/v') || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment: production

    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4

      - name: Production 배포 승인 대기
        uses: trstringer/manual-approval@v1
        if: startsWith(github.ref, 'refs/tags/v')
        with:
          secret: ${{ github.TOKEN }}
          approvers: ${{ secrets.PRODUCTION_APPROVERS }}
          minimum-approvals: 2
          issue-title: "🚀 Production 배포 승인 요청 - ${{ needs.build.outputs.version }}"
          issue-body: |
            ## DOT Platform Production 배포 승인 요청

            **버전**: ${{ needs.build.outputs.version }}
            **커밋**: ${{ github.sha }}
            **배포자**: ${{ github.actor }}

            ### ✅ 완료된 검증 단계
            - [x] 코드 품질 검사 (린팅, 타입체크, 단위테스트)
            - [x] Docker 이미지 빌드 및 레지스트리 푸시
            - [x] Staging 환경 배포 및 기본 검증
            - [x] 통합 테스트 (E2E, 접근성, 다국어, 성능)

            ### 🎯 배포 검증 계획
            - **환경**: Production
            - **검증 모드**: ${{ github.event.inputs.validation_mode || 'full' }}
            - **한국어 요구사항**: < 3초 페이지 로딩, 10명 동시 사용자 지원
            - **롤백 정책**: 검증 실패 시 자동 롤백 활성화

            **⚠️ 승인 후 즉시 자동 배포가 진행됩니다.**

      - name: 배포 서버 SSH 설정
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.PRODUCTION_SSH_KEY }}

      - name: Production 서버 배포 (전체 검증 포함)
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} << 'EOF'
            cd ${{ secrets.PRODUCTION_PATH }}
            git pull origin main

            # Production 배포 환경 변수 설정
            export BACKEND_IMAGE="${{ needs.build.outputs.backend-image }}"
            export FRONTEND_IMAGE="${{ needs.build.outputs.frontend-image }}"
            export VALIDATION_MODE="${{ github.event.inputs.validation_mode || 'full' }}"
            export SKIP_VALIDATION="${{ github.event.inputs.skip_validation || 'false' }}"
            export ROLLBACK_ON_VALIDATION_FAILURE="true"

            # DOT Platform 배포 검증 스크립트 실행 (통합 버전)
            ./scripts/deploy.sh ${{ needs.build.outputs.version }} production
          EOF

      - name: Production 배포 검증 완료 확인
        run: |
          # Production 환경 헬스체크
          curl -f http://${{ secrets.PRODUCTION_HOST }}/health

          # 한국어 요구사항 빠른 검증
          response_time=$(curl -o /dev/null -s -w '%{time_total}' http://${{ secrets.PRODUCTION_HOST }}/)
          echo "페이지 로딩 시간: ${response_time}초"

          # 검증 리포트 확인
          ssh ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} \
            "cd ${{ secrets.PRODUCTION_PATH }} && ls -la validation-reports/ && echo '검증 완료'"

      - name: 배포 성공 알림
        if: success()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_MESSAGE: |
            🚀 DOT Platform Production 배포 완료!

            **버전**: ${{ needs.build.outputs.version }}
            **환경**: Production
            **커밋**: ${{ github.sha }}
            **배포자**: ${{ github.actor }}
            **검증 모드**: ${{ github.event.inputs.validation_mode || 'full' }}

            ✅ 모든 배포 검증 단계를 통과했습니다.
            🇰🇷 한국어 요구사항 (< 3초, 10명 동시 사용자) 충족

      - name: 배포 실패 알림
        if: failure()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_COLOR: danger
          SLACK_MESSAGE: |
            ❌ DOT Platform Production 배포 실패!

            **버전**: ${{ needs.build.outputs.version }}
            **환경**: Production
            **커밋**: ${{ github.sha }}
            **배포자**: ${{ github.actor }}

            🔄 자동 롤백이 실행되었는지 확인하세요.
            📋 검증 로그를 확인하여 실패 원인을 파악하세요.

  # 6단계: 배포 후 지속적 모니터링
  post-deployment-monitoring:
    name: 배포 후 모니터링
    runs-on: ubuntu-latest
    needs: deploy-production
    if: success()

    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4

      - name: 5분간 지속적 시스템 모니터링
        run: |
          echo "🔍 Production 환경 5분간 모니터링 시작..."

          for i in {1..10}; do
            echo "📊 모니터링 $i/10 (30초 간격)"

            # 기본 헬스체크
            if ! curl -f http://${{ secrets.PRODUCTION_HOST }}/health; then
              echo "❌ 헬스체크 실패 - 즉시 알림"
              exit 1
            fi

            # 한국어 요구사항 응답 시간 체크
            response_time=$(curl -o /dev/null -s -w '%{time_total}' http://${{ secrets.PRODUCTION_HOST }}/)
            if (( $(echo "$response_time > 3.0" | bc -l) )); then
              echo "⚠️ 응답시간 지연: ${response_time}초 (한국어 요구사항: < 3초)"
            else
              echo "✅ 응답시간 정상: ${response_time}초"
            fi

            # 상세 헬스체크
            curl -s http://${{ secrets.PRODUCTION_HOST }}/health/detailed | jq . || echo "상세 헬스체크 정보 없음"

            sleep 30
          done

          echo "✅ 5분간 모니터링 완료 - 시스템 안정"

      - name: 최종 검증 리포트 생성
        run: |
          ssh ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} \
            "cd ${{ secrets.PRODUCTION_PATH }} && ./scripts/generate-final-report.sh --deployment-id ${{ github.run_id }} --version ${{ needs.build.outputs.version }}" || echo "최종 리포트 생성 스크립트 없음"

      - name: 모니터링 완료 및 성공 알림
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_MESSAGE: |
            ✅ DOT Platform 배포 및 모니터링 완료!

            **버전**: ${{ needs.build.outputs.version }}
            **배포 ID**: ${{ github.run_id }}
            **모니터링**: 5분간 안정성 확인 완료

            🎯 모든 한국어 요구사항이 충족되었습니다.
            🚀 시스템이 정상적으로 운영 중입니다.