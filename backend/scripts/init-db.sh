#!/bin/bash\n\n# ==========================================================\n# DOT Platform 데이터베이스 초기화 스크립트\n# PostGIS 확장 설치 및 초기 테이블 생성\n# ==========================================================\n\nset -e  # 에러 시 즉시 종료\n\n# 색상 정의\nRED='\\033[0;31m'\nGREEN='\\033[0;32m'\nYELLOW='\\033[1;33m'\nBLUE='\\033[0;34m'\nNC='\\033[0m' # No Color\n\n# 로그 함수들\nlog_info() {\n    echo -e \"${BLUE}[INFO]${NC} $1\"\n}\n\nlog_success() {\n    echo -e \"${GREEN}[SUCCESS]${NC} $1\"\n}\n\nlog_warning() {\n    echo -e \"${YELLOW}[WARNING]${NC} $1\"\n}\n\nlog_error() {\n    echo -e \"${RED}[ERROR]${NC} $1\"\n}\n\n# 환경 변수 로드\nif [ -f \".env\" ]; then\n    log_info \".env 파일에서 환경 변수 로드 중...\"\n    export $(grep -v '^#' .env | xargs)\nelse\n    log_warning \".env 파일이 없습니다. 기본값을 사용합니다.\"\nfi\n\n# 데이터베이스 연결 정보 설정\nDB_HOST=${DB_HOST:-localhost}\nDB_PORT=${DB_PORT:-5434}\nDB_USER=${DB_USER:-postgres}\nDB_PASSWORD=${DB_PASSWORD:-}\nDB_NAME=${DB_NAME:-dot_platform_dev}\nTEST_DB_NAME=${TEST_DB_NAME:-dot_platform_test}\nPOSTGRES_DB=${POSTGRES_DB:-postgres}  # 기본 postgres 데이터베이스\n\n# PostgreSQL 명령어 환경 변수 설정\nexport PGHOST=$DB_HOST\nexport PGPORT=$DB_PORT\nexport PGUSER=$DB_USER\nexport PGPASSWORD=$DB_PASSWORD\n\nlog_info \"========================================\"\nlog_info \"DOT Platform 데이터베이스 초기화 시작\"\nlog_info \"========================================\"\nlog_info \"호스트: $DB_HOST:$DB_PORT\"\nlog_info \"사용자: $DB_USER\"\nlog_info \"개발 DB: $DB_NAME\"\nlog_info \"테스트 DB: $TEST_DB_NAME\"\nlog_info \"========================================\"\n\n# PostgreSQL 서버 연결 테스트\nlog_info \"PostgreSQL 서버 연결 테스트 중...\"\nif ! pg_isready -h $DB_HOST -p $DB_PORT -U $DB_USER; then\n    log_error \"PostgreSQL 서버에 연결할 수 없습니다.\"\n    log_error \"서버가 실행 중인지 확인하고 연결 정보를 점검하세요.\"\n    exit 1\nfi\nlog_success \"PostgreSQL 서버 연결 확인됨\"\n\n# 슈퍼유저 권한 확인 (PostGIS 설치를 위해 필요)\nlog_info \"사용자 권한 확인 중...\"\nIS_SUPERUSER=$(psql -d $POSTGRES_DB -t -c \"SELECT rolsuper FROM pg_roles WHERE rolname='$DB_USER';\" | xargs)\nif [ \"$IS_SUPERUSER\" != \"t\" ]; then\n    log_warning \"현재 사용자($DB_USER)가 슈퍼유저가 아닙니다.\"\n    log_warning \"PostGIS 확장 설치에 제한이 있을 수 있습니다.\"\nelse\n    log_success \"슈퍼유저 권한 확인됨\"\nfi\n\n# 데이터베이스 생성 함수\ncreate_database() {\n    local db_name=$1\n    local description=$2\n    \n    log_info \"$description 데이터베이스 생성 중: $db_name\"\n    \n    # 데이터베이스 존재 여부 확인\n    if psql -d $POSTGRES_DB -lqt | cut -d \\| -f 1 | grep -qw $db_name; then\n        log_warning \"데이터베이스 '$db_name'가 이미 존재합니다.\"\n        return 0\n    fi\n    \n    # 데이터베이스 생성\n    if psql -d $POSTGRES_DB -c \"CREATE DATABASE $db_name WITH ENCODING='UTF8' LC_COLLATE='ko_KR.UTF-8' LC_CTYPE='ko_KR.UTF-8' TEMPLATE=template0;\"; then\n        log_success \"데이터베이스 '$db_name' 생성 완료\"\n    else\n        log_warning \"UTF-8 로케일로 생성 실패. 기본 설정으로 재시도...\"\n        psql -d $POSTGRES_DB -c \"CREATE DATABASE $db_name WITH ENCODING='UTF8';\"\n        log_success \"데이터베이스 '$db_name' 생성 완료 (기본 로케일)\"\n    fi\n}\n\n# PostGIS 확장 설치 함수\ninstall_postgis() {\n    local db_name=$1\n    \n    log_info \"$db_name에 PostGIS 확장 설치 중...\"\n    \n    # PostGIS 확장 설치\n    psql -d $db_name -c \"CREATE EXTENSION IF NOT EXISTS postgis;\"\n    psql -d $db_name -c \"CREATE EXTENSION IF NOT EXISTS postgis_topology;\"\n    \n    # PostGIS 버전 확인\n    POSTGIS_VERSION=$(psql -d $db_name -t -c \"SELECT PostGIS_Version();\" | xargs || echo \"설치되지 않음\")\n    \n    if [ \"$POSTGIS_VERSION\" != \"설치되지 않음\" ]; then\n        log_success \"PostGIS 설치 완료: $POSTGIS_VERSION\"\n    else\n        log_error \"PostGIS 설치 실패\"\n        return 1\n    fi\n}\n\n# UUID 확장 설치 함수\ninstall_uuid_extension() {\n    local db_name=$1\n    \n    log_info \"$db_name에 UUID 확장 설치 중...\"\n    \n    # UUID 확장 설치 (여러 버전 시도)\n    if psql -d $db_name -c \"CREATE EXTENSION IF NOT EXISTS \\\"uuid-ossp\\\";\"; then\n        log_success \"UUID 확장 설치 완료: uuid-ossp\"\n    elif psql -d $db_name -c \"CREATE EXTENSION IF NOT EXISTS uuid;\"; then\n        log_success \"UUID 확장 설치 완료: uuid\"\n    else\n        log_warning \"UUID 확장 설치 실패. 수동으로 UUID 생성 함수를 구현해야 할 수 있습니다.\"\n    fi\n}\n\n# 기본 스키마 생성 함수\ncreate_schemas() {\n    local db_name=$1\n    \n    log_info \"$db_name에 기본 스키마 생성 중...\"\n    \n    psql -d $db_name -c \"\n        -- 기본 스키마들\n        CREATE SCHEMA IF NOT EXISTS auth;          -- 인증 관련\n        CREATE SCHEMA IF NOT EXISTS content;       -- 콘텐츠 관리\n        CREATE SCHEMA IF NOT EXISTS location;      -- 위치 정보\n        CREATE SCHEMA IF NOT EXISTS audit;         -- 감사 로그\n        CREATE SCHEMA IF NOT EXISTS cache;         -- 캐시 테이블\n        \n        -- 스키마 코멘트\n        COMMENT ON SCHEMA auth IS '사용자 인증 및 권한 관련 테이블';\n        COMMENT ON SCHEMA content IS '콘텐츠 및 미디어 관련 테이블';\n        COMMENT ON SCHEMA location IS 'GPS 및 위치 기반 서비스 테이블';\n        COMMENT ON SCHEMA audit IS '감사 로그 및 이력 관리 테이블';\n        COMMENT ON SCHEMA cache IS '캐시 및 임시 데이터 테이블';\n    \"\n    \n    log_success \"기본 스키마 생성 완료\"\n}\n\n# 기본 함수들 생성\ncreate_functions() {\n    local db_name=$1\n    \n    log_info \"$db_name에 기본 함수들 생성 중...\"\n    \n    psql -d $db_name -c \"\n        -- 타임스탬프 자동 업데이트 함수\n        CREATE OR REPLACE FUNCTION update_updated_at_column()\n        RETURNS TRIGGER AS \\$\\$\n        BEGIN\n            NEW.updated_at = CURRENT_TIMESTAMP;\n            RETURN NEW;\n        END;\n        \\$\\$ language 'plpgsql';\n        \n        -- UUID 생성 함수 (확장이 없는 경우 대체)\n        CREATE OR REPLACE FUNCTION generate_uuid()\n        RETURNS TEXT AS \\$\\$\n        BEGIN\n            -- uuid-ossp 확장이 있으면 사용\n            BEGIN\n                RETURN uuid_generate_v4()::text;\n            EXCEPTION WHEN others THEN\n                -- 없으면 간단한 랜덤 UUID 생성\n                RETURN (\n                    lpad(to_hex((random() * 4294967295)::bigint), 8, '0') ||\n                    '-' ||\n                    lpad(to_hex((random() * 65535)::int), 4, '0') ||\n                    '-' ||\n                    '4' ||\n                    lpad(to_hex((random() * 4095)::int), 3, '0') ||\n                    '-' ||\n                    lpad(to_hex(((random() * 16383)::int | 32768)), 4, '0') ||\n                    '-' ||\n                    lpad(to_hex((random() * 4294967295)::bigint), 8, '0') ||\n                    lpad(to_hex((random() * 4294967295)::bigint), 4, '0')\n                );\n            END;\n        END;\n        \\$\\$ language 'plpgsql';\n        \n        -- 거리 계산 함수 (PostGIS가 없는 경우 대체)\n        CREATE OR REPLACE FUNCTION calculate_distance(lat1 FLOAT, lon1 FLOAT, lat2 FLOAT, lon2 FLOAT)\n        RETURNS FLOAT AS \\$\\$\n        DECLARE\n            r FLOAT := 6371000; -- 지구 반지름 (미터)\n            dlat FLOAT;\n            dlon FLOAT;\n            a FLOAT;\n            c FLOAT;\n        BEGIN\n            -- Haversine 공식을 사용한 거리 계산\n            dlat := radians(lat2 - lat1);\n            dlon := radians(lon2 - lon1);\n            a := sin(dlat/2) * sin(dlat/2) + cos(radians(lat1)) * cos(radians(lat2)) * sin(dlon/2) * sin(dlon/2);\n            c := 2 * atan2(sqrt(a), sqrt(1-a));\n            RETURN r * c;\n        END;\n        \\$\\$ language 'plpgsql';\n    \"\n    \n    log_success \"기본 함수들 생성 완료\"\n}\n\n# 권한 설정 함수\nset_permissions() {\n    local db_name=$1\n    \n    log_info \"$db_name에 권한 설정 중...\"\n    \n    psql -d $db_name -c \"\n        -- 스키마 사용 권한\n        GRANT USAGE ON SCHEMA auth TO $DB_USER;\n        GRANT USAGE ON SCHEMA content TO $DB_USER;\n        GRANT USAGE ON SCHEMA location TO $DB_USER;\n        GRANT USAGE ON SCHEMA audit TO $DB_USER;\n        GRANT USAGE ON SCHEMA cache TO $DB_USER;\n        \n        -- 향후 생성될 테이블에 대한 기본 권한\n        ALTER DEFAULT PRIVILEGES IN SCHEMA auth GRANT ALL ON TABLES TO $DB_USER;\n        ALTER DEFAULT PRIVILEGES IN SCHEMA content GRANT ALL ON TABLES TO $DB_USER;\n        ALTER DEFAULT PRIVILEGES IN SCHEMA location GRANT ALL ON TABLES TO $DB_USER;\n        ALTER DEFAULT PRIVILEGES IN SCHEMA audit GRANT ALL ON TABLES TO $DB_USER;\n        ALTER DEFAULT PRIVILEGES IN SCHEMA cache GRANT ALL ON TABLES TO $DB_USER;\n        \n        -- 시퀀스 권한\n        ALTER DEFAULT PRIVILEGES IN SCHEMA auth GRANT ALL ON SEQUENCES TO $DB_USER;\n        ALTER DEFAULT PRIVILEGES IN SCHEMA content GRANT ALL ON SEQUENCES TO $DB_USER;\n        ALTER DEFAULT PRIVILEGES IN SCHEMA location GRANT ALL ON SEQUENCES TO $DB_USER;\n        ALTER DEFAULT PRIVILEGES IN SCHEMA audit GRANT ALL ON SEQUENCES TO $DB_USER;\n        ALTER DEFAULT PRIVILEGES IN SCHEMA cache GRANT ALL ON SEQUENCES TO $DB_USER;\n    \"\n    \n    log_success \"권한 설정 완료\"\n}\n\n# 데이터베이스 초기화 상태 확인\ncheck_initialization() {\n    local db_name=$1\n    \n    log_info \"$db_name 초기화 상태 확인 중...\"\n    \n    # PostGIS 확장 확인\n    POSTGIS_INSTALLED=$(psql -d $db_name -t -c \"SELECT EXISTS(SELECT 1 FROM pg_extension WHERE extname = 'postgis');\" | xargs)\n    \n    # UUID 확장 확인\n    UUID_INSTALLED=$(psql -d $db_name -t -c \"SELECT EXISTS(SELECT 1 FROM pg_extension WHERE extname = 'uuid-ossp' OR extname = 'uuid');\" | xargs)\n    \n    # 스키마 확인\n    SCHEMA_COUNT=$(psql -d $db_name -t -c \"SELECT COUNT(*) FROM information_schema.schemata WHERE schema_name IN ('auth', 'content', 'location', 'audit', 'cache');\" | xargs)\n    \n    echo \"======================================\"\n    echo \"데이터베이스 초기화 상태: $db_name\"\n    echo \"======================================\"\n    echo \"PostGIS 설치: $([ \"$POSTGIS_INSTALLED\" = \"t\" ] && echo \"✅ 설치됨\" || echo \"❌ 미설치\")\"\n    echo \"UUID 확장: $([ \"$UUID_INSTALLED\" = \"t\" ] && echo \"✅ 설치됨\" || echo \"❌ 미설치\")\"\n    echo \"기본 스키마: $SCHEMA_COUNT/5 개\"\n    echo \"======================================\"\n}\n\n# 메인 실행 로직\nmain() {\n    log_info \"데이터베이스 초기화를 시작합니다...\"\n    \n    # 1. 개발 데이터베이스 생성 및 설정\n    create_database \"$DB_NAME\" \"개발용\"\n    install_postgis \"$DB_NAME\"\n    install_uuid_extension \"$DB_NAME\"\n    create_schemas \"$DB_NAME\"\n    create_functions \"$DB_NAME\"\n    set_permissions \"$DB_NAME\"\n    \n    # 2. 테스트 데이터베이스 생성 및 설정\n    create_database \"$TEST_DB_NAME\" \"테스트용\"\n    install_postgis \"$TEST_DB_NAME\"\n    install_uuid_extension \"$TEST_DB_NAME\"\n    create_schemas \"$TEST_DB_NAME\"\n    create_functions \"$TEST_DB_NAME\"\n    set_permissions \"$TEST_DB_NAME\"\n    \n    # 3. 초기화 결과 확인\n    echo \"\"\n    check_initialization \"$DB_NAME\"\n    echo \"\"\n    check_initialization \"$TEST_DB_NAME\"\n    echo \"\"\n    \n    log_success \"========================================\"\n    log_success \"DOT Platform 데이터베이스 초기화 완료!\"\n    log_success \"========================================\"\n    log_info \"다음 단계:\"\n    log_info \"1. 마이그레이션 실행: npm run migrate\"\n    log_info \"2. 시드 데이터 삽입: npm run seed\"\n    log_info \"3. 테스트 실행: npm test\"\n    log_success \"========================================\"\n}\n\n# 스크립트 실행\nif [[ \"${BASH_SOURCE[0]}\" == \"${0}\" ]]; then\n    main \"$@\"\nfi\n"