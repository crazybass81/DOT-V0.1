/**
 * DOT Platform Frontend - Axios Ïù∏Ïä§ÌÑ¥Ïä§ ÏÑ§Ï†ï
 * API ÏöîÏ≤≠ÏùÑ ÏúÑÌïú Ï§ëÏïôÌôîÎêú HTTP ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Íµ¨ÏÑ±
 */

import axios from 'axios';
import { store } from '../store';
import { logout, refreshToken } from '../store/slices/authSlice';
import { addToast } from '../store/slices/uiSlice';

// API Í∏∞Î≥∏ URL ÏÑ§Ï†ï - Vercel Functions ÌîÑÎ°ùÏãú ÏÇ¨Ïö©
const API_BASE_URL = process.env.REACT_APP_API_URL ||
  (process.env.NODE_ENV === 'production' ? '/api/v1' : 'http://localhost:3001/api/v1');

// Socket.io Í∏∞Î≥∏ URL
const SOCKET_URL = process.env.REACT_APP_SOCKET_URL || 'http://localhost:3001';

// Axios Ïù∏Ïä§ÌÑ¥Ïä§ ÏÉùÏÑ±
const apiClient = axios.create({
  baseURL: API_BASE_URL,
  timeout: 30000, // 30Ï¥à ÌÉÄÏûÑÏïÑÏõÉ
  headers: {
    'Content-Type': 'application/json',
  },
  withCredentials: true, // Ïø†ÌÇ§ Ìè¨Ìï®
});

// ÏöîÏ≤≠ Ïù∏ÌÑ∞ÏÖâÌÑ∞ - ÌÜ†ÌÅ∞ ÏûêÎèô Ï≤®Î∂Ä
apiClient.interceptors.request.use(
  (config) => {
    const state = store.getState();
    const token = state.auth.token || localStorage.getItem('dot_token');

    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }

    // ÌïúÍµ≠Ïñ¥ ÏÑ§Ï†ï
    config.headers['Accept-Language'] = 'ko-KR';

    // Í∞úÎ∞ú ÌôòÍ≤ΩÏóêÏÑú ÏöîÏ≤≠ Î°úÍπÖ
    if (process.env.NODE_ENV === 'development') {
      console.log('üì§ API Request:', {
        method: config.method.toUpperCase(),
        url: config.url,
        data: config.data,
        params: config.params,
      });
    }

    return config;
  },
  (error) => {
    console.error('Request error:', error);
    return Promise.reject(error);
  }
);

// ÏùëÎãµ Ïù∏ÌÑ∞ÏÖâÌÑ∞ - ÏóêÎü¨ Ï≤òÎ¶¨ Î∞è ÌÜ†ÌÅ∞ Í∞±Ïã†
apiClient.interceptors.response.use(
  (response) => {
    // Í∞úÎ∞ú ÌôòÍ≤ΩÏóêÏÑú ÏùëÎãµ Î°úÍπÖ
    if (process.env.NODE_ENV === 'development') {
      console.log('üì• API Response:', {
        url: response.config.url,
        status: response.status,
        data: response.data,
      });
    }

    return response;
  },
  async (error) => {
    const originalRequest = error.config;

    // Í∞úÎ∞ú ÌôòÍ≤ΩÏóêÏÑú ÏóêÎü¨ Î°úÍπÖ
    if (process.env.NODE_ENV === 'development') {
      console.error('‚ùå API Error:', {
        url: originalRequest?.url,
        status: error.response?.status,
        message: error.response?.data?.message || error.message,
      });
    }

    // 401 ÏóêÎü¨ Ï≤òÎ¶¨ - ÌÜ†ÌÅ∞ ÎßåÎ£å
    if (error.response?.status === 401 && !originalRequest._retry) {
      originalRequest._retry = true;

      try {
        // Î¶¨ÌîÑÎ†àÏãú ÌÜ†ÌÅ∞ÏúºÎ°ú ÏÉà ÌÜ†ÌÅ∞ Î∞úÍ∏â
        const result = await store.dispatch(refreshToken()).unwrap();

        if (result.token) {
          // ÏÉà ÌÜ†ÌÅ∞ÏúºÎ°ú ÏõêÎûò ÏöîÏ≤≠ Ïû¨ÏãúÎèÑ
          originalRequest.headers.Authorization = `Bearer ${result.token}`;
          return apiClient(originalRequest);
        }
      } catch (refreshError) {
        // Î¶¨ÌîÑÎ†àÏãú ÌÜ†ÌÅ∞ÎèÑ ÎßåÎ£åÎêú Í≤ΩÏö∞ Î°úÍ∑∏ÏïÑÏõÉ
        store.dispatch(logout());
        store.dispatch(addToast({
          type: 'error',
          message: 'ÏÑ∏ÏÖòÏù¥ ÎßåÎ£åÎêòÏóàÏäµÎãàÎã§. Îã§Ïãú Î°úÍ∑∏Ïù∏Ìï¥Ï£ºÏÑ∏Ïöî.',
        }));

        // Î°úÍ∑∏Ïù∏ ÌéòÏù¥ÏßÄÎ°ú Î¶¨Îã§Ïù¥Î†âÌä∏
        window.location.href = '/login';
      }
    }

    // 403 ÏóêÎü¨ Ï≤òÎ¶¨ - Í∂åÌïú ÏóÜÏùå
    if (error.response?.status === 403) {
      store.dispatch(addToast({
        type: 'error',
        message: error.response.data?.message || 'Ìï¥Îãπ ÏûëÏóÖÏóê ÎåÄÌïú Í∂åÌïúÏù¥ ÏóÜÏäµÎãàÎã§.',
      }));
    }

    // 404 ÏóêÎü¨ Ï≤òÎ¶¨ - Î¶¨ÏÜåÏä§ ÏóÜÏùå
    if (error.response?.status === 404) {
      store.dispatch(addToast({
        type: 'warning',
        message: error.response.data?.message || 'ÏöîÏ≤≠Ìïú Î¶¨ÏÜåÏä§Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.',
      }));
    }

    // 422 ÏóêÎü¨ Ï≤òÎ¶¨ - Ïú†Ìö®ÏÑ± Í≤ÄÏÇ¨ Ïã§Ìå®
    if (error.response?.status === 422) {
      const validationErrors = error.response.data?.errors;
      if (validationErrors && typeof validationErrors === 'object') {
        // Ï≤´ Î≤àÏß∏ Ïú†Ìö®ÏÑ± Í≤ÄÏÇ¨ ÏóêÎü¨ Î©îÏãúÏßÄ ÌëúÏãú
        const firstError = Object.values(validationErrors)[0];
        store.dispatch(addToast({
          type: 'error',
          message: Array.isArray(firstError) ? firstError[0] : firstError,
        }));
      }
    }

    // 500 ÏóêÎü¨ Ï≤òÎ¶¨ - ÏÑúÎ≤Ñ ÏóêÎü¨
    if (error.response?.status >= 500) {
      store.dispatch(addToast({
        type: 'error',
        message: 'ÏÑúÎ≤Ñ Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§. Ïû†Ïãú ÌõÑ Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.',
      }));
    }

    // ÎÑ§Ìä∏ÏõåÌÅ¨ ÏóêÎü¨ Ï≤òÎ¶¨
    if (!error.response && error.message === 'Network Error') {
      store.dispatch(addToast({
        type: 'error',
        message: 'ÎÑ§Ìä∏ÏõåÌÅ¨ Ïó∞Í≤∞ÏùÑ ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî.',
      }));
    }

    // ÌÉÄÏûÑÏïÑÏõÉ ÏóêÎü¨ Ï≤òÎ¶¨
    if (error.code === 'ECONNABORTED') {
      store.dispatch(addToast({
        type: 'error',
        message: 'ÏöîÏ≤≠ ÏãúÍ∞ÑÏù¥ Ï¥àÍ≥ºÎêòÏóàÏäµÎãàÎã§. Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.',
      }));
    }

    return Promise.reject(error);
  }
);

// ÌååÏùº ÏóÖÎ°úÎìúÏö© Î≥ÑÎèÑ Ïù∏Ïä§ÌÑ¥Ïä§
const fileUploadClient = axios.create({
  baseURL: API_BASE_URL,
  timeout: 60000, // ÌååÏùº ÏóÖÎ°úÎìúÎäî 60Ï¥à ÌÉÄÏûÑÏïÑÏõÉ
  headers: {
    'Content-Type': 'multipart/form-data',
  },
  withCredentials: true,
});

// ÌååÏùº ÏóÖÎ°úÎìú ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ÏóêÎèÑ ÎèôÏùºÌïú Ïù∏ÌÑ∞ÏÖâÌÑ∞ Ï†ÅÏö©
fileUploadClient.interceptors.request.use(apiClient.interceptors.request.handlers[0].fulfilled);
fileUploadClient.interceptors.response.use(
  apiClient.interceptors.response.handlers[0].fulfilled,
  apiClient.interceptors.response.handlers[0].rejected
);

// API Ìó¨Ìçº Ìï®ÏàòÎì§
export const api = {
  // GET ÏöîÏ≤≠
  get: (url, params = {}) => apiClient.get(url, { params }),

  // POST ÏöîÏ≤≠
  post: (url, data = {}) => apiClient.post(url, data),

  // PUT ÏöîÏ≤≠
  put: (url, data = {}) => apiClient.put(url, data),

  // PATCH ÏöîÏ≤≠
  patch: (url, data = {}) => apiClient.patch(url, data),

  // DELETE ÏöîÏ≤≠
  delete: (url) => apiClient.delete(url),

  // ÌååÏùº ÏóÖÎ°úÎìú
  upload: (url, formData, onUploadProgress) => {
    return fileUploadClient.post(url, formData, {
      onUploadProgress: onUploadProgress
        ? (progressEvent) => {
            const percentCompleted = Math.round(
              (progressEvent.loaded * 100) / progressEvent.total
            );
            onUploadProgress(percentCompleted);
          }
        : undefined,
    });
  },

  // ÌååÏùº Îã§Ïö¥Î°úÎìú
  download: async (url, filename) => {
    try {
      const response = await apiClient.get(url, {
        responseType: 'blob',
      });

      // BlobÏùÑ Îã§Ïö¥Î°úÎìú ÎßÅÌÅ¨Î°ú Î≥ÄÌôò
      const downloadUrl = window.URL.createObjectURL(new Blob([response.data]));
      const link = document.createElement('a');
      link.href = downloadUrl;
      link.setAttribute('download', filename);
      document.body.appendChild(link);
      link.click();
      link.remove();
      window.URL.revokeObjectURL(downloadUrl);

      return true;
    } catch (error) {
      console.error('Download failed:', error);
      throw error;
    }
  },
};

// API ÏóîÎìúÌè¨Ïù∏Ìä∏ ÏÉÅÏàò
export const API_ENDPOINTS = {
  // Ïù∏Ï¶ù Í¥ÄÎ†®
  AUTH: {
    LOGIN: '/auth/login',
    LOGOUT: '/auth/logout',
    REGISTER: '/auth/register',
    REFRESH: '/auth/refresh',
    VERIFY: '/auth/verify',
    SWITCH_ROLE: '/auth/switch-role',
    FORGOT_PASSWORD: '/auth/forgot-password',
    RESET_PASSWORD: '/auth/reset-password',
  },

  // ÏÇ¨Ïö©Ïûê Í¥ÄÎ†®
  USER: {
    PROFILE: '/users/profile',
    UPDATE_PROFILE: '/users/profile',
    CHANGE_PASSWORD: '/users/change-password',
    UPLOAD_AVATAR: '/users/avatar',
  },

  // ÏÇ¨ÏóÖÏû• Í¥ÄÎ†®
  BUSINESS: {
    LIST: '/businesses',
    GET: (id) => `/businesses/${id}`,
    CREATE: '/businesses',
    UPDATE: (id) => `/businesses/${id}`,
    DELETE: (id) => `/businesses/${id}`,
    EMPLOYEES: (id) => `/businesses/${id}/employees`,
    INVITE: (id) => `/businesses/${id}/invite`,
  },

  // Í∑ºÌÉú Í¥ÄÎ†®
  ATTENDANCE: {
    CHECK_IN: '/attendance/check-in',
    CHECK_OUT: '/attendance/check-out',
    BREAK_START: '/attendance/break/start',
    BREAK_END: '/attendance/break/end',
    TODAY: '/attendance/today',
    HISTORY: '/attendance/history',
    REPORT: '/attendance/report',
  },

  // Ïä§ÏºÄÏ§Ñ Í¥ÄÎ†®
  SCHEDULE: {
    LIST: '/schedules',
    GET: (id) => `/schedules/${id}`,
    CREATE: '/schedules',
    UPDATE: (id) => `/schedules/${id}`,
    DELETE: (id) => `/schedules/${id}`,
    ASSIGN: '/schedules/assign',
    SWAP: '/schedules/swap',
    REQUEST_CHANGE: '/schedules/request-change',
  },

  // Í∏âÏó¨ Í¥ÄÎ†®
  PAYROLL: {
    STATEMENTS: '/payroll/statements',
    GET_STATEMENT: (id) => `/payroll/statements/${id}`,
    CALCULATE: '/payroll/calculate',
    DOWNLOAD: (id) => `/payroll/statements/${id}/download`,
  },

  // ÏïåÎ¶º Í¥ÄÎ†®
  NOTIFICATION: {
    LIST: '/notifications',
    MARK_READ: (id) => `/notifications/${id}/read`,
    MARK_ALL_READ: '/notifications/read-all',
    DELETE: (id) => `/notifications/${id}`,
    SETTINGS: '/notifications/settings',
  },

  // Î¨∏ÏÑú Í¥ÄÎ†®
  DOCUMENT: {
    LIST: '/documents',
    UPLOAD: '/documents/upload',
    DOWNLOAD: (id) => `/documents/${id}/download`,
    DELETE: (id) => `/documents/${id}`,
  },
};

// Socket Ïù¥Î≤§Ìä∏ ÏÉÅÏàò
export const SOCKET_EVENTS = {
  // Ïó∞Í≤∞ Í¥ÄÎ†®
  CONNECT: 'connect',
  DISCONNECT: 'disconnect',
  CONNECT_ERROR: 'connect_error',
  RECONNECT: 'reconnect',

  // Í∑ºÌÉú Í¥ÄÎ†®
  ATTENDANCE_STATUS_CHANGE: 'attendance:status-change',
  ATTENDANCE_TIME_UPDATE: 'attendance:time-update',
  ATTENDANCE_CHECKIN: 'attendance:checkin',
  ATTENDANCE_CHECKOUT: 'attendance:checkout',

  // Ïä§ÏºÄÏ§Ñ Í¥ÄÎ†®
  SCHEDULE_CREATED: 'schedule:created',
  SCHEDULE_UPDATED: 'schedule:updated',
  SCHEDULE_DELETED: 'schedule:deleted',
  SCHEDULE_ASSIGNED: 'schedule:assigned',
  SCHEDULE_SWAP_REQUEST: 'schedule:swap-request',

  // ÏïåÎ¶º Í¥ÄÎ†®
  NOTIFICATION_NEW: 'notification:new',
  NOTIFICATION_UNREAD_COUNT: 'notification:unread-count',

  // ÏãúÏä§ÌÖú Í¥ÄÎ†®
  SYSTEM_MAINTENANCE: 'system:maintenance',
  SYSTEM_ANNOUNCEMENT: 'system:announcement',
};

export { apiClient, fileUploadClient, API_BASE_URL, SOCKET_URL };
export default api;